Let 1 represent ‘A’, 2 represents ‘B’, etc. Given a digit sequence, count the number of possible decodings of the given digit sequence.
Examples:

Input:  digits[] = "121"
Output: 3
// The possible decodings are "ABA", "AU", "LA"

Input: digits[] = "1234"
Output: 3
// The possible decodings are "ABCD", "LCD", "AWD"
An empty digit sequence is considered to have one decoding. It may be assumed that the input contains valid digits from 0 to 9 and there are no leading 0’s,
no extra trailing 0’s and no two or more consecutive 0’s.

code:

#include <stdio.h>
#include <string.h>
int main()
{
    char digit[]="123";
    int n = strlen(digit);
    
    int count[n+1];
    
    count[0]=1;
    count[1]=1;
    
    if(digit[0]=='0')
    {
        return 0;
    }
    for(int i=2;i<=n;i++)
    {
        count[i]=0;
        if(digit[i-1]>'1') //checking last digit
        {
            count[i]=count[i-1];
        }
        
        if(digit[i-2]=='1' || digit[i-2]=='2' && digit[i-1]<'7') //checking last 2 digit
        {
            count[i]=count[i-1]+count[i-2];
        }
    }
    printf("%d",count[n]);
    return 0;
}
